import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author brian tan
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //print opening tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        //call to find title
        String title = "title";
        int child = getChildElement(channel, title);
        //print title if not print no title
        if (channel.child(child).numberOfChildren() > 0) {
            title = channel.child(child).child(0).label();
            out.println(title);
        } else {
            out.println("no title");
        }
        //closing tags
        out.println("</title>");
        out.println("</head>");
        //opening tag and call to find url
        out.println("<body>");
        String link = "link";
        child = getChildElement(channel, link);
        String url = channel.child(child).child(0).label();
        //print title header with hyperlink
        out.print("<h1><a href=\"");
        out.print(url);
        out.print("\">");
        out.print(title);
        out.println("</a></h1>");
        //print description opening
        out.println("<p>");
        //call to find description
        String description = "description";
        child = getChildElement(channel, description);
        //print description if not print no description
        if (channel.child(child).numberOfChildren() > 0) {
            description = channel.child(child).child(0).label();
            out.println(description);
        } else {
            out.println("no description");
        }
        //closing tag
        out.println("</p>");
        //print table
        out.println("<table border = \"5\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //print closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int x = -1;
        int i = 0;
        //loop to find child
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equals(tag)) {
                    x = i;
                }
            }
            i++;
        }
        return x;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //open table row
        out.println("<tr>");
        //call to find child pubDate, source, title, link, and description
        int pubDate = getChildElement(item, "pubDate");
        int source = getChildElement(item, "source");
        int title = getChildElement(item, "title");
        int link = getChildElement(item, "link");
        int description = getChildElement(item, "description");
        // print pubDate if present
        if (pubDate > -1) {
            out.println(
                    "<td>" + item.child(pubDate).child(0).label() + "</td>");
        } else {
            out.println("<td>no date</td>");
        }
        // print source with hyperlink if present
        if (source > -1) {
            out.println("<td>");
            out.print("<a href=\"");
            out.print(item.child(source).attributeValue("url"));
            if (item.child(source).numberOfChildren() > 0) {
                out.println(
                        "\">" + item.child(source).child(0).label() + "</a>");
                out.println("</td>");
            }
        } else {
            out.println("<td>no source</td>");
        }
        // print link if present
        out.println("<td>");
        if (link > -1) {
            // print hyperlink
            out.print("<a href=\"");
            out.print(item.child(link).child(0).label());
            out.print("\">");
        }
        //print title if child present else print description if child present
        if (title > -1) {
            if (item.child(title).numberOfChildren() == 0) {
                out.print("no title");
            } else {
                out.print(item.child(title).child(0).label());
            }
        } else if (description > -1) {
            if (item.child(description).numberOfChildren() == 0) {
                out.print("no description");
            } else {
                out.print(item.child(description).child(0).label());
            }
        }
        // closing tags
        if (link > -1) {
            out.println("</a>");
        }
        out.println("</td>");
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        //check if url is rss 2.0
        if (xml.hasAttribute("version") && xml.label().equals("rss")
                && xml.attributeValue("version").equals("2.0")) {
            XMLTree channel = xml.child(0);
            //call methods to print html tags
            outputHeader(channel, out);
            int i = 0;
            while (i < channel.numberOfChildren()) {
                if (channel.child(i).isTag()) {
                    if (channel.child(i).label().equals("item")) {
                        XMLTree item = channel.child(i);
                        processItem(item, out);
                    }
                }
                i++;
            }
            outputFooter(out);
            out.close();
            //if url is not rss 2.0, output not correct url
        } else {
            out.println("not a rss 2.0 url");
        }
    }

    /**
     * Processes input xml document into the corresponding HTML output file.
     *
     * @param file
     *            the name of the input xml document
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads feed from input xml document, saves HTML document tags
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFile(XMLTree xml, SimpleWriter out) {
        //print opening tags
        out.println("<html>");
        out.println("<head>");
        //print title
        String title = "title";
        title = xml.attributeValue(title);
        out.println("<title>" + title + "</title>");
        //closing tags
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>" + title + "</h1>");
        out.println("<ul>");
        //print feeds with loop
        int i = 0;
        while (i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals("feed")) {
                String url = "url";
                url = xml.child(i).attributeValue(url);
                String file = "file";
                file = xml.child(i).attributeValue(file);
                String name = "name";
                name = xml.child(i).attributeValue(name);
                SimpleWriter process = new SimpleWriter1L(file);
                processFeed(url, file, process);
                out.println(
                        "<li><a href=\"" + file + "\">" + name + "</a></li>");
            }
            i++;
        }
        //closing tags
        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");
        out.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        //prompt for XML file containing a list of URLs for RSS v2.0 feeds
        out.print("enter xml file name: ");
        String xmlfile = in.nextLine() + ".xml";
        XMLTree xml = new XMLTree1(xmlfile);
        //prompt for an output file if input top-level tag, <feeds>, has a
        //required attribute, title
        if (xml.label().equals("feeds") && xml.hasAttribute("title")) {
            out.print("output file: ");
            String output = in.nextLine() + ".html";
            SimpleWriter fileOut = new SimpleWriter1L(output);
            processFile(xml, fileOut);
        } else {
            out.println("no feeds");
        }
        //close streams
        in.close();
        out.close();
    }

}
